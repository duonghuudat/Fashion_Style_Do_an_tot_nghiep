import os
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import requests
from dotenv import load_dotenv
from pymongo import MongoClient

from sentence_transformers import SentenceTransformer
import faiss
import numpy as np


load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "YOUR_GOOGLE_API_KEY")
MONGO_URI = os.getenv("MONGO_URI", "YOUR_MONGO_URI")


mongo_client = MongoClient(MONGO_URI)
db = mongo_client["test"]
products_collection = db["products"]


app = Flask(__name__)
CORS(app)

# T·∫£i m√¥ h√¨nh BERT v√† kh·ªüi t·∫°o FAISS index
bert_model = SentenceTransformer("all-MiniLM-L6-v2")
dimension = 384  # embedding size c·ªßa all-MiniLM-L6-v2
faiss_index = faiss.IndexFlatL2(dimension)
product_embeddings = []
product_data = []

def build_faiss_index():
    global product_embeddings, product_data
    products = list(products_collection.find({}))
    texts = [f"{p.get('name', '')} {p.get('type', '')} {p.get('description', '')}" for p in products]
    embeddings = bert_model.encode(texts, convert_to_numpy=True)
    product_embeddings = embeddings
    product_data = products
    faiss_index.add(embeddings)

build_faiss_index()

# H√†m g·ªçi Gemini API
def call_gemini_api(prompt, model="models/gemini-1.5-flash"):
    url = f"https://generativelanguage.googleapis.com/v1beta/{model}:generateContent"
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [{"role": "user", "parts": [{"text": prompt}]}]
    }
    params = {"key": GOOGLE_API_KEY}

    try:
        response = requests.post(url, headers=headers, json=payload, params=params)
        response.raise_for_status()
        data = response.json()
        content = data.get("candidates", [])[0].get("content", {}).get("parts", [])
        return {"text": content[0].get("text", "") if content else ""}
    except Exception as e:
        print("Gemini API error:", e)
        return None

# Truy xu·∫•t s·∫£n ph·∫©m b·∫±ng semantic search (FAISS + BERT)
def find_products_by_semantic_search(query, top_k=5):
    query_vec = bert_model.encode([query], convert_to_numpy=True)
    distances, indices = faiss_index.search(query_vec, top_k)

    results = []
    for idx in indices[0]:
        if idx < len(product_data):
            p = product_data[idx]
            results.append({
                "name": p.get("name"),
                "price": p.get("price"),
                "image": p.get("image"),
                "rating": p.get("rating"),
                "discount": p.get("discount"),
                "countInStock": p.get("countInStock"),
                "description": p.get("description")
            })
    return results

# Route giao di·ªán chatbot
@app.route("/")
def home():
    return render_template("index.html")

# API x·ª≠ l√Ω ph·∫£n h·ªìi chatbot
@app.route("/get", methods=["POST"])
def chatbot_response():
    try:
        data = request.get_json()
        user_message = data.get("message", "").strip()

        if not user_message:
            return jsonify({"response": "B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi ƒë·ªÉ m√¨nh h·ªó tr·ª£ nh√©!"})

        # X√°c ƒë·ªãnh intent
        intent_check = call_gemini_api(
            f"""
            Ng∆∞·ªùi d√πng h·ªèi: "{user_message}".
            ƒê√¢y c√≥ ph·∫£i l√† c√¢u h·ªèi li√™n quan ƒë·∫øn t√¨m ki·∫øm s·∫£n ph·∫©m th·ªùi trang kh√¥ng?
            Tr·∫£ l·ªùi ng·∫Øn g·ªçn: 'yes' ho·∫∑c 'no'.
            """
        )
        if not intent_check:
            return jsonify({"response": "C√≥ l·ªói khi ki·ªÉm tra n·ªôi dung. Th·ª≠ l·∫°i sau nh√©!"})

        if "yes" in intent_check.get("text", "").lower():
            products = find_products_by_semantic_search(user_message)

            if not products:
                return jsonify({"response": "Xin l·ªói, hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n üò•."})

            # So·∫°n prompt t∆∞ v·∫•n th·ªùi trang
            formatted_products = "\n".join([
                f"- {p['name']} | Gi√°: {p['price']} VND | ƒê√°nh gi√°: {p['rating']}/5 | Gi·∫£m: {p['discount']}% | T·ªìn kho: {p['countInStock']}"
                for p in products
            ])

            prompt = f"""
                B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n th·ªùi trang c·ªßa c·ª≠a h√†ng Fashion Style, phong c√°ch t·ª± nhi√™n, th√¢n thi·ªán.

                Kh√°ch h·ªèi: "{user_message}"

                D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p:

                {formatted_products}

                H√£y:
                1. G·ª£i √Ω 2‚Äì3 m·∫´u n·ªïi b·∫≠t ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa kh√°ch.
                2. Vi·∫øt n·ªôi dung t∆∞ v·∫•n ng·∫Øn g·ªçn (3‚Äì5 d√≤ng), th√¢n thi·ªán, c√≥ emoji nh·∫π nh√†ng.
                3. ƒê∆∞a ra l√Ω do t·∫°i sao s·∫£n ph·∫©m ph√π h·ª£p (v√≠ d·ª•: ph√π h·ª£p v·ªõi m√πa, phong c√°ch, ho·∫∑c gi√° c·∫£ h·ª£p l√Ω).
                4. Tr√°nh vƒÉn phong m√°y m√≥c (nh∆∞ "d·ªØ li·ªáu", "truy v·∫•n"), h√£y vi·∫øt nh∆∞ ƒëang chat th·∫≠t v·ªõi kh√°ch h√†ng.

                Ch·ªâ tr·∫£ l·ªùi ph·∫ßn t∆∞ v·∫•n, kh√¥ng c·∫ßn l·∫∑p l·∫°i danh s√°ch s·∫£n ph·∫©m.
            """

            response = call_gemini_api(prompt)
            if not response:
                return jsonify({"response": "T·∫°m th·ªùi m√¨nh ch∆∞a th·ªÉ t∆∞ v·∫•n ƒë∆∞·ª£c, b·∫°n quay l·∫°i sau m·ªôt ch√∫t nh√© üò•."})

            return jsonify({"response": response.get("text", "")})

        # Kh√¥ng ph·∫£i c√¢u h·ªèi mua h√†ng ‚Üí tr·∫£ l·ªùi th√¥ng th∆∞·ªùng
        fallback = call_gemini_api(user_message)
        if not fallback:
            return jsonify({"response": "Hi·ªán m√¨nh ƒëang b·∫≠n ch√∫t, b·∫°n quay l·∫°i sau nh√© üòÖ"})
        return jsonify({"response": fallback.get("text", "")})

    except Exception as e:
        print("L·ªói:", e)
        return jsonify({"response": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau!"})

if __name__ == "__main__":
    app.run(debug=True)


