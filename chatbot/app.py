# import random
# import json
# import pickle
# import numpy as np
# import tensorflow as tf
# import nltk
# from nltk.stem import WordNetLemmatizer
# from flask import Flask, render_template, request, jsonify
# from flask_cors import CORS  # Th√™m CORS ƒë·ªÉ tr√°nh l·ªói Cross-Origin Request

# # Kh·ªüi t·∫°o Flask app
# app = Flask(__name__)
# CORS(app)  # Cho ph√©p t·∫•t c·∫£ c√°c ngu·ªìn truy c·∫≠p API

# # ƒê·∫£m b·∫£o t√†i nguy√™n c·ªßa nltk ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng
# nltk.download("punkt")
# nltk.download("wordnet")

# # Kh·ªüi t·∫°o lemmatizer ƒë·ªÉ chu·∫©n h√≥a t·ª´
# lemmatizer = WordNetLemmatizer()

# # Load d·ªØ li·ªáu intents t·ª´ file JSON
# intents = json.loads(open('chatbot/intents.json', encoding="utf8").read())

# # Load danh s√°ch t·ª´ (words) v√† danh s√°ch intent (classes) ƒë√£ l∆∞u tr∆∞·ªõc ƒë√≥
# words = pickle.load(open('chatbot/words.pkl', 'rb'))
# classes = pickle.load(open('chatbot/classes.pkl', 'rb'))

# # Load m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán
# model = tf.keras.models.load_model('chatbot/chatbot_model.h5')

# def clean_up_sentence(sentence):
#     """
#     Ti·ªÅn x·ª≠ l√Ω c√¢u nh·∫≠p t·ª´ ng∆∞·ªùi d√πng:
#     - Tokenize th√†nh danh s√°ch t·ª´
#     - Lemmatization ƒë·ªÉ chu·∫©n h√≥a t·ª´ v·ªÅ d·∫°ng g·ªëc
#     """
#     sentence_words = nltk.word_tokenize(sentence)
#     sentence_words = [lemmatizer.lemmatize(word.lower()) for word in sentence_words]
#     return sentence_words

# def bag_of_words(sentence):
#     """
#     Chuy·ªÉn c√¢u nh·∫≠p t·ª´ ng∆∞·ªùi d√πng th√†nh vector Bag of Words (BOW):
#     - N·∫øu t·ª´ c√≥ trong danh s√°ch words, g√°n gi√° tr·ªã 1, ng∆∞·ª£c l·∫°i g√°n 0
#     """
#     sentence_words = clean_up_sentence(sentence)
#     bag = [0] * len(words)
#     for s in sentence_words:
#         for i, w in enumerate(words):
#             if w == s:
#                 bag[i] = 1
#     return np.array(bag)

# def predict_class(sentence):
#     """
#     D·ª± ƒëo√°n intent c·ªßa c√¢u nh·∫≠p v√†o b·∫±ng c√°ch:
#     - Chuy·ªÉn c√¢u th√†nh vector BOW
#     - D·ª± ƒëo√°n x√°c su·∫•t intent t·ª´ m√¥ h√¨nh
#     - Ch·ªâ gi·ªØ l·∫°i nh·ªØng intent c√≥ x√°c su·∫•t l·ªõn h∆°n ng∆∞·ª°ng ERROR_THRESHOLD
#     """
#     bow = bag_of_words(sentence)
#     res = model.predict(np.array([bow]))[0]
#     ERROR_THRESHOLD = 0.25  # Ch·ªâ gi·ªØ l·∫°i c√°c intent c√≥ ƒë·ªô tin c·∫≠y tr√™n 25%
#     results = [[i, r] for i, r in enumerate(res) if r > ERROR_THRESHOLD]
#     results.sort(key=lambda x: x[1], reverse=True)  # S·∫Øp x·∫øp theo x√°c su·∫•t gi·∫£m d·∫ßn
#     return [{"intent": classes[r[0]], "probability": str(r[1])} for r in results]

# def get_response(intents_list, intents_json):
#     """
#     Ch·ªçn c√¢u tr·∫£ l·ªùi d·ª±a tr√™n intent d·ª± ƒëo√°n:
#     - L·∫•y intent c√≥ x√°c su·∫•t cao nh·∫•t
#     - T√¨m trong file intents.json c√¢u tr·∫£ l·ªùi t∆∞∆°ng ·ª©ng
#     """
#     if not intents_list:
#         return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu."
    
#     tag = intents_list[0]['intent']
#     for i in intents_json['intents']:
#         if i['tag'] == tag:
#             return random.choice(i['responses'])
#     return "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu."

# @app.route("/")
# def home():
#     """Trang ch·ªß hi·ªÉn th·ªã giao di·ªán chatbot"""
#     return render_template("index.html")

# @app.route("/get", methods=["POST"])
# def chatbot_response():
#     """
#     API nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng, x·ª≠ l√Ω v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi:
#     - L·∫•y tin nh·∫Øn t·ª´ request JSON
#     - D·ª± ƒëo√°n intent
#     - Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi ph√π h·ª£p
#     """
#     try:
#         data = request.get_json()
#         user_message = data.get("message", "").strip()

#         if not user_message:
#             return jsonify({"response": "Xin h√£y nh·∫≠p n·ªôi dung tin nh·∫Øn."})

#         predicted_intents = predict_class(user_message)
#         bot_response = get_response(predicted_intents, intents)

#         return jsonify({"response": bot_response})

#     except Exception as e:
#         print(f"L·ªói x·ª≠ l√Ω chatbot: {e}")
#         return jsonify({"response": "Xin l·ªói, chatbot ƒëang g·∫∑p s·ª± c·ªë."})

# if __name__ == "__main__":
#     app.run(debug=True)




import os
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import requests
from dotenv import load_dotenv
from pymongo import MongoClient

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "YOUR_GOOGLE_API_KEY")
MONGO_URI = os.getenv("MONGO_URI", "YOUR_MONGO_URI")

# K·∫øt n·ªëi MongoDB
mongo_client = MongoClient(MONGO_URI)
db = mongo_client["test"]
products_collection = db["products"]

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
CORS(app)

# H√†m g·ªçi Gemini API
def call_gemini_api(prompt, model="models/gemini-1.5-flash"):
    url = f"https://generativelanguage.googleapis.com/v1beta/{model}:generateContent"
    headers = {"Content-Type": "application/json"}
    payload = {
        "contents": [
            {"role": "user", "parts": [{"text": prompt}]}
        ]
    }
    params = {"key": GOOGLE_API_KEY}

    try:
        response = requests.post(url, headers=headers, json=payload, params=params)
        response.raise_for_status()
        data = response.json()
        content = data.get("candidates", [])[0].get("content", {}).get("parts", [])
        return {"text": content[0].get("text", "") if content else ""}
    except Exception as e:
        print("Gemini API error:", e)
        return None

# Truy xu·∫•t s·∫£n ph·∫©m ph√π h·ª£p
def find_products_by_keywords(keywords):
    query = {
        "$or": [
            {"name": {"$regex": keywords, "$options": "i"}},
            {"type": {"$regex": keywords, "$options": "i"}},
            {"description": {"$regex": keywords, "$options": "i"}}
        ]
    }
    products = products_collection.find(query).limit(5)
    return [
        {
            "name": p.get("name"),
            "price": p.get("price"),
            "image": p.get("image"),
            "rating": p.get("rating"),
            "discount": p.get("discount"),
            "countInStock": p.get("countInStock"),
            "description": p.get("description")
        }
        for p in products
    ]

# Route giao di·ªán chatbot
@app.route("/")
def home():
    return render_template("index.html")

# API x·ª≠ l√Ω ph·∫£n h·ªìi chatbot
@app.route("/get", methods=["POST"])
def chatbot_response():
    try:
        data = request.get_json()
        user_message = data.get("message", "").strip()

        if not user_message:
            return jsonify({"response": "B·∫°n vui l√≤ng nh·∫≠p c√¢u h·ªèi ƒë·ªÉ m√¨nh h·ªó tr·ª£ nh√©!"})

        # X√°c ƒë·ªãnh intent
        intent_check = call_gemini_api(
            f"Ng∆∞·ªùi d√πng h·ªèi: \"{user_message}\". ƒê√¢y c√≥ ph·∫£i c√¢u h·ªèi t√¨m s·∫£n ph·∫©m th·ªùi trang kh√¥ng? Tr·∫£ l·ªùi ng·∫Øn: 'yes' ho·∫∑c 'no'."
        )
        if not intent_check:
            return jsonify({"response": "C√≥ l·ªói khi ki·ªÉm tra n·ªôi dung. Th·ª≠ l·∫°i sau nh√©!"})

        if "yes" in intent_check.get("text", "").lower():
            products = find_products_by_keywords(user_message)

            if not products:
                return jsonify({"response": "Xin l·ªói, hi·ªán t·∫°i ch∆∞a c√≥ s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n üò•."})

            # So·∫°n prompt t∆∞ v·∫•n th·ªùi trang
            formatted_products = "\n".join([
                f"- {p['name']} | Gi√°: {p['price']} VND | ƒê√°nh gi√°: {p['rating']}/5 | Gi·∫£m: {p['discount']}% | T·ªìn kho: {p['countInStock']}"
                for p in products
            ])

            prompt = f"""
                B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n th·ªùi trang c·ªßa c·ª≠a h√†ng Fashion Style, phong c√°ch t·ª± nhi√™n, th√¢n thi·ªán.

                Kh√°ch h·ªèi: "{user_message}"

                D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p:

                {formatted_products}

                H√£y:
                1. G·ª£i √Ω 2‚Äì3 m·∫´u n·ªïi b·∫≠t ph√π h·ª£p v·ªõi nhu c·∫ßu.
                2. Vi·∫øt n·ªôi dung t∆∞ v·∫•n ng·∫Øn g·ªçn (3‚Äì5 d√≤ng), th√¢n thi·ªán, c√≥ emoji nh·∫π nh√†ng.
                3. Tr√°nh vƒÉn phong m√°y m√≥c (nh∆∞ "d·ªØ li·ªáu", "truy v·∫•n"), h√£y vi·∫øt nh∆∞ ƒëang chat th·∫≠t v·ªõi kh√°ch h√†ng.

                Ch·ªâ tr·∫£ l·ªùi ph·∫ßn t∆∞ v·∫•n, kh√¥ng c·∫ßn l·∫∑p l·∫°i danh s√°ch s·∫£n ph·∫©m.
                            """

            response = call_gemini_api(prompt)
            if not response:
                return jsonify({"response": "T·∫°m th·ªùi m√¨nh ch∆∞a th·ªÉ t∆∞ v·∫•n ƒë∆∞·ª£c, b·∫°n quay l·∫°i sau m·ªôt ch√∫t nh√© üò•."})

            return jsonify({"response": response.get("text", "")})

        # Kh√¥ng ph·∫£i c√¢u h·ªèi mua h√†ng ‚Üí tr·∫£ l·ªùi th√¥ng th∆∞·ªùng
        fallback = call_gemini_api(user_message)
        if not fallback:
            return jsonify({"response": "Hi·ªán m√¨nh ƒëang b·∫≠n ch√∫t, b·∫°n quay l·∫°i sau nh√© üòÖ"})
        return jsonify({"response": fallback.get("text", "")})

    except Exception as e:
        print("L·ªói:", e)
        return jsonify({"response": "C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau!"})

if __name__ == "__main__":
    app.run(debug=True)
